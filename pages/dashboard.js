import React from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from "react"
import { useRouter } from 'next/router'
import { useEthers, useEtherBalance } from '@usedapp/core'
import Card from '../components/Card'
import { factoryContractAddress, raffleContractAddress, raffleFactoryABI, raffleABI } from '../utils/contract-utils'
import { ethers } from "ethers"

const dashboard = () => {
  useEffect(() => {
    getMyRaffles();
  },[]);

  const { activateBrowserWallet, deactivate, account } = useEthers()
  const [myRaffles, setMyRaffles] = useState([]);
  const [raffleCards, setRaffleCards] = useState([]);
  const [loaded, isLoaded] = useState(false);

  const getMyRaffles = async() =>{
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const raffleFactory = new ethers.Contract(factoryContractAddress, raffleFactoryABI, signer);

        const numRaffles = await raffleFactory.vaultCount();
        let newRaffles = []
        for (let i = 0; i < numRaffles; i++) {
          const raffleAddr = await raffleFactory.vaults(i);
          const raffle = new ethers.Contract(
              raffleAddr, raffleABI, provider
          );
          const admin = await raffle.admin();
          if(admin == account){
            newRaffles = [...newRaffles, raffle];
            setMyRaffles(newRaffles);
          }
        }

        const items = await Promise.all(myRaffles.map(async i =>{
          const name = await i.name();
          const address = await i.address;
          const tokenAddress = await i.token();
          let item = {
            name: name,
            address: address,
            tokenAddress: tokenAddress
          }
          return item
        }))
        setRaffleCards(items)
        console.log(raffleCards)
        isLoaded(true);
      } else {
        console.log("Ethereum object doesn't exist!");
      }
    } catch (error) {
      console.log(error);
    }
  }

  if(loaded === 'false') return(<h1>Loading...</h1>)
  return (
    <div className="bg-slate-50 min-w-screen min-h-screen">
      <Head>
          <title>legit</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-slate-50 min-w-screen min-h-screen">

        {/* {!account && 
        <div className="flex justify-center">
          <div>
          <div>
            uh oh, your wallet isnt connected
          </div>
          <div>
            connect wallet to ethereum rinkeby
          </div>
          <button
          className="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded"
          onClick={activateBrowserWallet}>connect wallet</button>
          </div>
        </div>
        } */}
        {loaded? <h1>loaded</h1>: <h1>loading</h1>}
        {account && 
          <div >
            <button onClick={getMyRaffles}>
              get my raffles
            </button>
            <div className="flex justify-center">
              <h2>raffles made</h2>
              {
                raffleCards.map((raffle, i)=>{
                  <Card key={i} raffle={raffle}/>
                })
              }
            </div> 
          </div>   
        }
      </main>
  </div>
      )

      }
export default dashboard