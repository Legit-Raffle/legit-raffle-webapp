import React from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { ethers, utils } from "ethers"
import { useEffect, useState } from "react"
import { useRouter } from 'next/router'
import 'react-calendar/dist/Calendar.css';
import Navbar from './components/Navbar'
import Footer from './components/Footer'
import { useEthers, useEtherBalance, useContractFunction, useContractCall } from '@usedapp/core'
import abi from "../utils/RaffleFactory.json"
import { Contract } from '@ethersproject/contracts'

const create = () => {
  const { activateBrowserWallet, deactivate, account, library } = useEthers();

  //raffleFactory vars
  const contractABI = abi.abi;
  const contractAddress ="0x17A0434239CE9720803b84136Ea7a707bF354C29";
  const contractInterface = new utils.Interface(contractABI);

  const raffleContract = new Contract(contractAddress, contractInterface);

  // const { state, send } = useContractFunction(raffleContract, 'createRaffle')


  const [tokenAddress, setTokenAddress] = useState('') // nft contract address
  const [tokenId, setTokenId] = useState(0) //nft id

  // unecessary right now
  // const [raffleEnd, setRaffleEnd] = useState(new Date())
  // const [fileUrl, setFileUrl] = useState(null)
  // const [formInput, updateFormInput] = useState({name: '', description: ''})

  //nft contract vars
  const nftIface = new utils.Interface([
      'function approve(address to, uint256 tokenId) external',
      'function getApproved(uint256 tokenId) external view returns (address operator)', 
  ])
  const result = useContractCall( library && {
      abi: nftIface,
      address: tokenAddress,
      method: 'getApproved',
      args: [tokenId]
  });
  const nftContract = null;
  const {state, send} = useContractFunction(
    nftContract, 'approve');


  // const createRaffle = () =>{
  //   send(tokenAddress, tokenId);
  // }

  const createRaffle = async() =>{
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const raffleContract = new ethers.Contract(contractAddress, contractABI, signer);

        console.log("waiting for nft approval");
        const nftContract = new ethers.Contract(tokenAddress, nftIface, signer);
        const nftApprove = await nftContract.approve(contractAddress, tokenId, {gasLimit: 300000});
        console.log("Mining...", nftApprove.hash);

        await nftApprove.wait();
        console.log("Mined -- ", nftApprove.hash);

        const raffleCreate = await raffleContract.createRaffle(tokenAddress, tokenId, {gasLimit: 300000});
        console.log("Mining...", raffleCreate.hash);

        await raffleCreate.wait();
        console.log("Mined -- ", raffleCreate.hash);

      } else {
        console.log("Ethereum object doesn't exist!");
      }
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <div class=" min-w-screen min-h-screen">
    <Head>
        <title>legit</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
    </Head>
    <Navbar/>
    <main class="bg-slate-50 min-w-screen min-h-screen">
      <div className="flex justify-center">
        <div className="w-1/2 flex flex-col pb-12">
          <h2 className='mt-10 font-bold text-5xl'>create raffle</h2>
          {/* <input 
            placeholder="raffle name"
            className="mt-8 border rounded p-4"
            name='name'
            onChange={e => updateFormInput({ ...formInput, name: e.target.value })}
          /> */}
          {/* <textarea
            placeholder="description"
            className="mt-8 border rounded p-4"
            name='description'
            onChange={e => updateFormInput({ ...formInput, description: e.target.value })}
          /> */}
          <input
            placeholder="token address"
            className="mt-8 border rounded p-4"
            onChange={e => setTokenAddress(e.target.value)}
          />
          <input
            placeholder="token id"
            className="mt-8 border rounded p-4"
            onChange={e => setTokenId(e.target.value)}
          />
          {/* <div className="mt-8 border rounded p-4">
            <p>pick raffle end date</p>
            <Calendar onChange={setRaffleEnd}className="mt-4"/>
          </div> */}
          {/* <div className="mt-8 border rounded p-4">
            <p>upload raffle thumbnail</p>
            <input
              type="file"
              name="Asset"
              className="my-4"
              // onChange={}
            />
            {
              fileUrl && (
                <img className="rounded mt-4" width="350" src={fileUrl} />
              )
            }
          </div> */}
          <button onClick={createRaffle} className="font-bold mt-4 bg-green-500 text-white rounded p-4 shadow-lg hover:bg-green-700">
            create raffle
          </button>
        </div>
      </div>
    </main>
    <Footer/>
  </div>
  )
}

export default create